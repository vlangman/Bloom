#pragma kernel ProcessNeurons
#pragma kernel ProcessPheromones

// ***** NB rule of thumb *****
// always add new includes under these 
// hlsl error reporting (or my cs skill) is garbage and will lead you to the wrong file, *[if the error resides in newly included file]

#include "Neurons/neuronProcessor.hlsl"
#include "Organisms/organismController.hlsl"
#include "Pheromones/pheromoneController.hlsl"


float _time;
float _deltaTime;
float4 _resolution;
int _seed;
#define numThreads 32


void ProcessOrganismNeurons(uint TYPE, inout Organism organism){
// iterate through all of the organisms neurons and compute any EMITTERS
	uint  index = organism.neuronsStartIndex;
	const uint maximum = index + GlobalNeuronCount;

	for(uint i = index; index < maximum; index++)
	{
		Neuron neuron = neuronBuffer[index];
		if(TYPE == neuron.baseType)
		{
			ProcessNeuron(neuron,organism);
		}
		neuronBuffer[index] = neuron;
		index++;
	}

}



[numthreads(numThreads,numThreads,1)]
void ProcessNeurons (uint3 id : SV_DispatchThreadID)
{
	
	UpdateProgramState(id, _time,_deltaTime,_resolution,_seed);

	uint idx = Index(id.xy);
	Organism organism = organismBuffer[idx];


	//need this for render object args buffer
	// organismFiltered.Append(idx);

	if(organism.alive == 0)
	{
		return;
	}


	OrganismController oController;
	PheromoneController pController;
	
	oController.RandomMove(organism, 5.0);

	// ProcessOrganismNeurons(EMITTER, organism);
	uint worldPositionIndex = Index(organism.position);

	pController.ReleasePheromone(organism);


	
	//make update

	organismBuffer[idx] = organism;
	organismTexture[organism.position] = float4(1,0,0,1);

	
	// //only want the filtered ones
	// organismFiltered.Append(worldPositionIndex);
}


 
[numthreads(numThreads,numThreads,1)]
void ProcessPheromones (uint3 id : SV_DispatchThreadID)
{
	UpdateProgramState(id, _time,_deltaTime,_resolution, _seed);

	PheromoneController pController;
	uint index =  Index(id.xy);
	// float originalAlpha = pheromoneBuffer[index].colour.a;
	pController.ShitBlur(id); 
	// pheromoneBuffer[index].colour =  pController.FastBlur(id, float2(0,1));

	
	// pheromoneBuffer[index].colour.a = originalAlpha*=0.2*programState._deltaTime;
	pheromoneTexture[id.xy] = pheromoneBuffer[index].colour;
}

